import streamlit as st
import pandas as pd

# st.set_page_config(layout="wide")

def equity_page():
    products = {
        "Gold (XAUUSD)": {"unit": "Ounces", "contract_size": 100, "decimal_places": 2},
        "Silver (XAGUSD)": {"unit": "Ounces", "contract_size": 1000, "decimal_places": 3},
        "Oil (WTI)": {"unit": "Barrels", "contract_size": 1000, "decimal_places": 2},
        "Index (S&P 500)": {"unit": "Points", "contract_size": 50, "decimal_places": 2},
        "EUR/USD": {"unit": "Units", "contract_size": 100000, "decimal_places": 5},
        "GBP/USD": {"unit": "Units", "contract_size": 100000, "decimal_places": 5},
        "USD/JPY": {"unit": "Units", "contract_size": 100000, "decimal_places": 3},
        "AUD/USD": {"unit": "Units", "contract_size": 100000, "decimal_places": 5},
        "USD/CHF": {"unit": "Units", "contract_size": 100000, "decimal_places": 5},
        "USD/CAD": {"unit": "Units", "contract_size": 100000, "decimal_places": 5},
        "NZD/USD": {"unit": "Units", "contract_size": 100000, "decimal_places": 5},
        "EUR/JPY": {"unit": "Units", "contract_size": 100000, "decimal_places": 3},
        "GBP/JPY": {"unit": "Units", "contract_size": 100000, "decimal_places": 3},
        "BTC/USD": {"unit": "Coins", "contract_size": 1, "decimal_places": 8},
        "ETH/USD": {"unit": "Coins", "contract_size": 1, "decimal_places": 8},
        "BNB/USD": {"unit": "Coins", "contract_size": 1, "decimal_places": 8},
        "XRP/USD": {"unit": "Coins", "contract_size": 1, "decimal_places": 8},
        "LTC/USD": {"unit": "Coins", "contract_size": 1, "decimal_places": 8},
    }

    translations = {
        "en": {
            "title": "üìä Balance, Equity, Margin & Margin Level Tool",
            "balance": "Balance (Closed P/L)",
            "balance_concept": "Balance is the historical net worth in your account, excluding any open trades. It reflects deposits, withdrawals, and closed position P/L.",
            "equity": "Equity (Real-Time Value)",
            "equity_concept": "Equity = Balance + floating P/L from open positions. Reflects the real-time account value.",
            "floating_pl": "Floating Profit/Loss",
            "floating_pl_concept": "Sum of all open positions' unrealized profits and losses, based on real-time prices.",
            "used_margin": "Used Margin",
            "used_margin_concept": "Total margin currently locked for open trades. Varies by position size, instrument, and real-time price.",
            "free_margin": "Free Margin",
            "free_margin_concept": "Equity minus Used Margin. It‚Äôs the margin left for new trades or to absorb losses.",
            "margin_level": "Margin Level",
            "margin_level_formula": "Margin Level = (Equity √∑ Used Margin) √ó 100%",
            "margin_level_concept": "Shows how much your equity covers your used margin. <100% = margin call risk.",
            "margin_requirement": "Margin Requirement",
            "margin_requirement_formula": "Margin Requirement = Position Size √ó Price √ó Margin Rate",
            "order_entry": "Enter Your Open Positions",
            "instrument": "Instrument",
            "position_size": "Position Size",
            "entry_price": "Entry Price",
            "current_price": "Current Price",
            "direction": "Direction",
            "long": "Long",
            "short": "Short",
            "margin_rate": "Margin Rate (%)",
            "add_order": "Add Position",
            "delete_order": "Delete Selected",
            "calc_all": "üîÑ Calculate Account Status",
            "summary": "Account Summary",
            "no_orders": "No open positions yet. Add one below.",
            "remove_order": "Remove",
            "concepts": "üßÆ Concepts Explained",
            "formulas": "üîó Key Formulas",
            "delete_confirm": "Are you sure to delete this order?",
        },
        "zh": {
            "title": "üìä ‰ΩôÈ¢ù„ÄÅÊùÉÁõä„ÄÅ‰øùËØÅÈáë‰∏éÊØîÁéáÂ∑•ÂÖ∑",
            "balance": "‰ΩôÈ¢ùÔºàÂ∑≤Âπ≥‰ªìÁõà‰∫èÔºâ",
            "balance_concept": "‰ΩôÈ¢ùÊòØË¥¶Êà∑ÂéÜÂè≤ÂáÄÂÄºÔºå‰∏çÂåÖÂê´Êú™Âπ≥‰ªìËÆ¢Âçï„ÄÇÂèçÊò†ÂÖ•Èáë„ÄÅÂá∫ÈáëÂíåÂ∑≤Âπ≥‰ªìÁõà‰∫è„ÄÇ",
            "equity": "ÊùÉÁõäÔºàÂÆûÊó∂Ôºâ",
            "equity_concept": "ÊùÉÁõä = ‰ΩôÈ¢ù + Êú™Âπ≥‰ªìÂçïÊµÆÂä®Áõà‰∫è„ÄÇÂèçÊò†Ë¥¶Êà∑ÂÆûÊó∂‰ª∑ÂÄº„ÄÇ",
            "floating_pl": "ÊµÆÂä®Áõà‰∫è",
            "floating_pl_concept": "ÊâÄÊúâÊú™Âπ≥‰ªìÂçïÁöÑÊµÆÂä®Áõà‰∫èÊÄªÂíåÔºåÊ†πÊçÆÂÆûÊó∂Ë°åÊÉÖËÆ°ÁÆó„ÄÇ",
            "used_margin": "Â∑≤Áî®‰øùËØÅÈáë",
            "used_margin_concept": "ÂΩìÂâçÊú™Âπ≥‰ªìËÆ¢ÂçïÂç†Áî®ÁöÑ‰øùËØÅÈáëÊÄªÈ¢ù„ÄÇ‰∏éÊåÅ‰ªì„ÄÅÂìÅÁßç„ÄÅÂÆûÊó∂‰ª∑Ê†ºÁ≠âÁõ∏ÂÖ≥„ÄÇ",
            "free_margin": "ÂèØÁî®‰øùËØÅÈáë",
            "free_margin_concept": "ÊùÉÁõäÂáèÂéªÂ∑≤Áî®‰øùËØÅÈáëÔºåÂèØÁî®Êù•ÂºÄÊñ∞‰ªìÊàñÊäµÂæ°‰∫èÊçü„ÄÇ",
            "margin_level": "‰øùËØÅÈáëÊØîÁéá",
            "margin_level_formula": "‰øùËØÅÈáëÊØîÁéá = (ÊùÉÁõä √∑ Â∑≤Áî®‰øùËØÅÈáë) √ó 100%",
            "margin_level_concept": "ÂèçÊò†ÊùÉÁõäÂØπÂ∑≤Áî®‰øùËØÅÈáëÁöÑË¶ÜÁõñ„ÄÇ‰Ωé‰∫é100%Èù¢‰∏¥Âº∫Âπ≥È£éÈô©„ÄÇ",
            "margin_requirement": "‰øùËØÅÈáëË¶ÅÊ±Ç",
            "margin_requirement_formula": "‰øùËØÅÈáëË¶ÅÊ±Ç = ÊåÅ‰ªìËßÑÊ®° √ó ÂΩìÂâç‰ª∑Ê†º √ó ‰øùËØÅÈáëÁéá",
            "order_entry": "ËØ∑ÂΩïÂÖ•‰Ω†ÁöÑÊú™Âπ≥‰ªìËÆ¢Âçï",
            "instrument": "ÂìÅÁßç",
            "position_size": "ÊåÅ‰ªìËßÑÊ®°",
            "entry_price": "ÂºÄ‰ªì‰ª∑",
            "current_price": "ÂΩìÂâç‰ª∑",
            "direction": "ÊñπÂêë",
            "long": "‰π∞ÂÖ•",
            "short": "ÂçñÂá∫",
            "margin_rate": "‰øùËØÅÈáëÁéáÔºà%Ôºâ",
            "add_order": "Ê∑ªÂä†ËÆ¢Âçï",
            "delete_order": "Âà†Èô§ÈÄâ‰∏≠ËÆ¢Âçï",
            "calc_all": "üîÑ ËÆ°ÁÆóË¥¶Êà∑Áä∂ÊÄÅ",
            "summary": "Ë¥¶Êà∑Ê±áÊÄª",
            "no_orders": "ÊöÇÊó†Êú™Âπ≥‰ªìÂçïÔºåËØ∑‰∏ãÊñπÊ∑ªÂä†„ÄÇ",
            "remove_order": "ÁßªÈô§",
            "concepts": "üßÆ Ê†∏ÂøÉÊ¶ÇÂøµËØ¥Êòé",
            "formulas": "üîó ‰∏ªË¶ÅÂÖ¨Âºè",
            "delete_confirm": "Á°ÆËÆ§Ë¶ÅÂà†Èô§ËØ•ËÆ¢ÂçïÔºü",
        }
    }

    lang = st.session_state.get("language", "en")
    t = translations[lang]

    # Áªü‰∏ÄÈ°µÈù¢Ê†∑Âºè
    st.markdown("""
        <style>
        .block-container {padding-top: 2rem !important; max-width: 1100px;}
        .metric-value {font-size: 2.2em !important; font-weight: 600;}
        .stDataFrame thead tr th {background-color: #f7f8fa !important;}
        .st-emotion-cache-1kyxreq {background: #f9f9fa;}
        .stForm label {font-weight:600;}
        </style>
    """, unsafe_allow_html=True)

    st.title(t["title"])

    with st.expander(t["concepts"], expanded=False):
        st.markdown(f"- **{t['balance']}**: {t['balance_concept']}")
        st.markdown(f"- **{t['equity']}**: {t['equity_concept']}")
        st.markdown(f"- **{t['floating_pl']}**: {t['floating_pl_concept']}")
        st.markdown(f"- **{t['used_margin']}**: {t['used_margin_concept']}")
        st.markdown(f"- **{t['free_margin']}**: {t['free_margin_concept']}")
        st.markdown(f"- **{t['margin_level']}**: {t['margin_level_concept']}")

    with st.expander(t["formulas"], expanded=False):
        st.code(f"{t['margin_level_formula']}", language="markdown")
        st.code(f"{t['margin_requirement_formula']}", language="markdown")

    st.divider()

    # Ë¥¶Êà∑ÂàùÂßã‰ΩôÈ¢ùËæìÂÖ• + Ê±áÊÄªÂç°ÁâáÂå∫
    balance = st.number_input(f"üí∞ {t['balance']}", min_value=0.0, value=10000.0, step=100.0, key="balance_input")
    if "orders" not in st.session_state:
        st.session_state.orders = []

    # Êñ∞ËÆ¢ÂçïÂΩïÂÖ•
    with st.form("order_form"):
        cols = st.columns([2, 1, 1, 1.5, 1.5, 1])
        with cols[0]:
            instrument = st.selectbox(t["instrument"], list(products.keys()), key="order_instrument")
        product_params = products[instrument]
        contract_size = product_params["contract_size"]
        decimals = product_params["decimal_places"]
        unit = product_params["unit"]

        with cols[1]:
            direction = st.selectbox(t["direction"], [t["long"], t["short"]])
        with cols[2]:
            size = st.number_input(t["position_size"], min_value=0.0, value=1.0)
        with cols[3]:
            entry_price = st.number_input(t["entry_price"], min_value=0.0, value=1.1000)
        with cols[4]:
            current_price = st.number_input(t["current_price"], min_value=0.0, value=1.1100)
        with cols[5]:
            margin_rate = st.number_input(t["margin_rate"], min_value=0.1, max_value=100.0, value=2.0)
        submitted = st.form_submit_button(t["add_order"])
        if submitted:
            st.session_state.orders.append({
                "Instrument": instrument,
                "Direction": direction,
                "Position Size": size,
                "Entry Price": entry_price,
                "Current Price": current_price,
                "Margin Rate": margin_rate,
                "Contract Size": contract_size,
                "Unit": unit,
                "Decimals": decimals
            })
            st.success("‚úÖ Added!")

    # Â±ïÁ§∫Â∑≤ËæìÂÖ•ËÆ¢Âçï + Âçï‰∏™ÁßªÈô§ÊåâÈíÆ
    if st.session_state.orders:
        orders_df = pd.DataFrame(st.session_state.orders)
        # Ê∑ªÂä†Âà†Èô§ÂäüËÉΩ
        for idx, row in orders_df.iterrows():
            cols = st.columns([8,1])
            with cols[0]:
                st.write(f"{row['Instrument']} | {row['Direction']} | {row['Position Size']} @ {row['Entry Price']}‚Üí{row['Current Price']} | {row['Margin Rate']}%")
            with cols[1]:
                if st.button(f"{t['remove_order']} {idx+1}", key=f"delete_{idx}"):
                    st.session_state.orders.pop(idx)
                    st.experimental_rerun()
        st.divider()
    else:
        st.info(t["no_orders"])

    # ËÆ°ÁÆóÊâÄÊúâË¥¶Êà∑ÂÖ≥ÈîÆÊåáÊ†á
    if st.button(t["calc_all"]):
        total_floating = 0.0
        total_used_margin = 0.0
        for order in st.session_state.orders:
            cs = order.get("Contract Size", 100000)
            pnl_per_unit = (order["Current Price"] - order["Entry Price"]) if order["Direction"] == t["long"] else (order["Entry Price"] - order["Current Price"])
            floating = pnl_per_unit * order["Position Size"] * cs
            total_floating += floating
            margin_req = order["Position Size"] * cs * order["Current Price"] * (order["Margin Rate"] / 100)
            total_used_margin += margin_req

        equity = balance + total_floating
        free_margin = equity - total_used_margin
        margin_level = (equity / total_used_margin * 100) if total_used_margin > 0 else float('inf')

        # Âç°ÁâáÂå∫ summary
        colA, colB, colC, colD, colE, colF = st.columns(6)
        colA.metric(label=t["balance"], value=f"{balance:,.2f}")
        colB.metric(label=t["floating_pl"], value=f"{total_floating:,.2f}")
        colC.metric(label=t["equity"], value=f"{equity:,.2f}")
        colD.metric(label=t["used_margin"], value=f"{total_used_margin:,.2f}")
        colE.metric(label=t["free_margin"], value=f"{free_margin:,.2f}")
        colF.metric(label=t["margin_level"], value=f"{margin_level:.2f} %")
        st.caption(t["margin_level_concept"])
        st.divider()

        # ËØ¶ÁªÜËØ¥Êòé
        with st.expander(t["summary"], expanded=True):
            st.markdown(f"- **{t['balance']}:** {balance:.2f}")
            st.markdown(f"- **{t['floating_pl']}:** {total_floating:.2f} ({t['floating_pl_concept']})")
            st.markdown(f"- **{t['equity']}:** {equity:.2f} ({t['equity_concept']})")
            st.markdown(f"- **{t['used_margin']}:** {total_used_margin:.2f} ({t['used_margin_concept']})")
            st.markdown(f"- **{t['free_margin']}:** {free_margin:.2f} ({t['free_margin_concept']})")
            st.markdown(f"- **{t['margin_level']}:** {margin_level:.2f}% ({t['margin_level_concept']})")

# Ë∞ÉÁî®È°µÈù¢ÂáΩÊï∞
# equity_page()
